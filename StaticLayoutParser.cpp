#define __PROG_TYPES_COMPAT__
#include <avr/pgmspace.h>
#include <SPI.h>
#include "StaticLayoutParser.h"

typedef enum {
  layout_colemak,
  layout_dvorak,
  layout_greg,
  LAST_LAYOUT
} Layouts;

#define FIRST_KEY 0
#define LAST_KEY 57
//These match the USB HID Mapping (for example offset 4 is A, so if the array at offset 4 has a 4 in it, then it's an A. If offset 4 has a 5 in it, then the A is remapped to B (which is normally at offset 5).
const prog_uint8_t layouts[][58] PROGMEM  = {
  //Colemak
  { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x16, 0x09, 0x17, 0x07, 0x0B, 0x18, 0x11, 0x08, 0x0C, 0x10, 0x0E, 0x1C, 0x33, 0x14, 0x13, 0x15, 0x0A, 0x0F, 0x19, 0x1A, 0x1B, 0x0D, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x12, 0x34, 0x35, 0x36, 0x37, 0x38, 0x2A },

  //Dvorak
  { 0x00, 0x01, 0x02, 0x03, 0x04, 0x1B, 0x0D, 0x08, 0x37, 0x18, 0x0C, 0x07, 0x06, 0x0B, 0x17, 0x11, 0x10, 0x05, 0x15, 0x0F, 0x34, 0x13, 0x12, 0x1C, 0x0A, 0x0E, 0x36, 0x14, 0x09, 0x33, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2F, 0x30, 0x38, 0x2E, 0x31, 0x32, 0x16, 0x2D, 0x35, 0x1A, 0x19, 0x1D, 0x39 },

  //Colemak - Greg (CAPS LOCK == ESC)
  { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x16, 0x09, 0x17, 0x07, 0x0B, 0x18, 0x11, 0x08, 0x0C, 0x10, 0x0E, 0x1C, 0x33, 0x14, 0x13, 0x15, 0x0A, 0x0F, 0x19, 0x1A, 0x1B, 0x0D, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x12, 0x34, 0x35, 0x36, 0x37, 0x38, 0x29 },

};

void StaticLayoutParser::Parse(HID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf) {
  //Pass it along (only needed if we're taking advantage of the base base library features.
  //KeyboardReportParser::Parse(hid, is_rpt_id, len, buf);

  KBDINFO *kbd = (KBDINFO*)buf;
  for (int i = 0; i < 6; i++) {
    if (kbd->Keys[i] >= FIRST_KEY && kbd->Keys[i] <= LAST_KEY) {
      kbd->Keys[i] = pgm_read_byte(layouts[layout_greg] + kbd->Keys[i]);
    }
  }
}

